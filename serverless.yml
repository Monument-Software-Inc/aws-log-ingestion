service: newrelic-log-ingestion

provider:
  name: aws
  runtime: python3.11
  stage: ${self:custom.stage}
  timeout: 30
  logRetentionInDays: ${env:SLS_LOG_RETENTION_DAYS, 30}
  memorySize: 128
  region: ${opt:region, "us-east-2"}

  deploymentBucket:
    name: mnmt-eng-infra-use2-prd-deployments

  environment:
    # Determines if logs are forwarded to New Relic Infrastructure
    INFRA_ENABLED: ${env:INFRA_ENABLED, "True"}
    # Your NewRelic license key
    LICENSE_KEY: ${env:LICENSE_KEY}
    # Determines if logs are forwarded to New Relic Logging
    LOGGING_ENABLED: ${env:LOGGING_ENABLED, "True"}
    # A boolean to determine if you want to output debug messages in the CloudWatch console
    DEBUG_LOGGING_ENABLED: ${env:DEBUG_LOGGING_ENABLED, "False"}
    NR_LAMBDA_LOG_GROUP_PREFIX: ${env:NR_LAMBDA_LOG_GROUP_PREFIX, "/aws/lambda"}

custom:
  stage: ${opt:stage, env:SLS_STAGE, 'dev'}
  pythonRequirements:
    dockerizePip: true
    fileName: ./src/requirements.txt

package:
  exclude:
    - ./**
  include:  
    - ./LICENSE
    - ./src/function.py

functions:
  sls-integrations-newrelic-log-ingestion-rds:
    description: Send log data from CloudWatch Logs (RDS) to New Relic Infrastructure (Cloud Integrations) and New Relic Logging.
    handler: src/function.lambda_handler
    name: sls-integrations-newrelic-log-ingestion-rds
    role: arn:aws:iam::${aws:accountId}:role/mnmt-eng-use2-${self:custom.stage}-newrelic
    environment:        
      NR_LAMBDA_LOG_GROUP_PREFIX: "/aws/rds/cluster"

  sls-integrations-newrelic-log-ingestion-lambda:
    description: Send log data from CloudWatch Logs (Lambda) to New Relic Infrastructure (Cloud Integrations) and New Relic Logging.
    handler: src/function.lambda_handler
    name: sls-integrations-newrelic-log-ingestion-lambda
    role: arn:aws:iam::${aws:accountId}:role/mnmt-eng-use2-${self:custom.stage}-newrelic
    
plugins:
  - serverless-better-credentials # must be the first
  - serverless-python-requirements

resources:
  Resources:
    LambdaInvokePermissionLambda:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: sls-integrations-newrelic-log-ingestion-lambda
        Action: lambda:InvokeFunction
        Principal: !Sub logs.${AWS::Region}.amazonaws.com
        SourceArn: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
        SourceAccount: !Sub ${AWS::AccountId}
    LambdaInvokePermissionRDS:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: sls-integrations-newrelic-log-ingestion-rds
        Action: lambda:InvokeFunction
        Principal: !Sub logs.${AWS::Region}.amazonaws.com
        SourceArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
        SourceAccount: !Sub ${AWS::AccountId}
    